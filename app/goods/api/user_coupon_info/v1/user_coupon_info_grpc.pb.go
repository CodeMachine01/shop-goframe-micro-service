// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: user_coupon_info/v1/user_coupon_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCouponInfo_GetList_FullMethodName = "/user_coupon_info.user_coupon_info/GetList"
	UserCouponInfo_Create_FullMethodName  = "/user_coupon_info.user_coupon_info/Create"
	UserCouponInfo_Update_FullMethodName  = "/user_coupon_info.user_coupon_info/Update"
	UserCouponInfo_Delete_FullMethodName  = "/user_coupon_info.user_coupon_info/Delete"
)

// UserCouponInfoClient is the client API for UserCouponInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCouponInfoClient interface {
	GetList(ctx context.Context, in *UserCouponInfoGetListReq, opts ...grpc.CallOption) (*UserCouponInfoGetListRes, error)
	Create(ctx context.Context, in *UserCouponInfoCreateReq, opts ...grpc.CallOption) (*UserCouponInfoCreateRes, error)
	Update(ctx context.Context, in *UserCouponInfoUpdateReq, opts ...grpc.CallOption) (*UserCouponInfoUpdateRes, error)
	Delete(ctx context.Context, in *UserCouponInfoDeleteReq, opts ...grpc.CallOption) (*UserCouponInfoDeleteRes, error)
}

type userCouponInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCouponInfoClient(cc grpc.ClientConnInterface) UserCouponInfoClient {
	return &userCouponInfoClient{cc}
}

func (c *userCouponInfoClient) GetList(ctx context.Context, in *UserCouponInfoGetListReq, opts ...grpc.CallOption) (*UserCouponInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCouponInfoGetListRes)
	err := c.cc.Invoke(ctx, UserCouponInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCouponInfoClient) Create(ctx context.Context, in *UserCouponInfoCreateReq, opts ...grpc.CallOption) (*UserCouponInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCouponInfoCreateRes)
	err := c.cc.Invoke(ctx, UserCouponInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCouponInfoClient) Update(ctx context.Context, in *UserCouponInfoUpdateReq, opts ...grpc.CallOption) (*UserCouponInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCouponInfoUpdateRes)
	err := c.cc.Invoke(ctx, UserCouponInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCouponInfoClient) Delete(ctx context.Context, in *UserCouponInfoDeleteReq, opts ...grpc.CallOption) (*UserCouponInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCouponInfoDeleteRes)
	err := c.cc.Invoke(ctx, UserCouponInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCouponInfoServer is the server API for UserCouponInfo service.
// All implementations must embed UnimplementedUserCouponInfoServer
// for forward compatibility.
type UserCouponInfoServer interface {
	GetList(context.Context, *UserCouponInfoGetListReq) (*UserCouponInfoGetListRes, error)
	Create(context.Context, *UserCouponInfoCreateReq) (*UserCouponInfoCreateRes, error)
	Update(context.Context, *UserCouponInfoUpdateReq) (*UserCouponInfoUpdateRes, error)
	Delete(context.Context, *UserCouponInfoDeleteReq) (*UserCouponInfoDeleteRes, error)
	mustEmbedUnimplementedUserCouponInfoServer()
}

// UnimplementedUserCouponInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCouponInfoServer struct{}

func (UnimplementedUserCouponInfoServer) GetList(context.Context, *UserCouponInfoGetListReq) (*UserCouponInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedUserCouponInfoServer) Create(context.Context, *UserCouponInfoCreateReq) (*UserCouponInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserCouponInfoServer) Update(context.Context, *UserCouponInfoUpdateReq) (*UserCouponInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserCouponInfoServer) Delete(context.Context, *UserCouponInfoDeleteReq) (*UserCouponInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserCouponInfoServer) mustEmbedUnimplementedUserCouponInfoServer() {}
func (UnimplementedUserCouponInfoServer) testEmbeddedByValue()                        {}

// UnsafeUserCouponInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCouponInfoServer will
// result in compilation errors.
type UnsafeUserCouponInfoServer interface {
	mustEmbedUnimplementedUserCouponInfoServer()
}

func RegisterUserCouponInfoServer(s grpc.ServiceRegistrar, srv UserCouponInfoServer) {
	// If the following call pancis, it indicates UnimplementedUserCouponInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCouponInfo_ServiceDesc, srv)
}

func _UserCouponInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCouponInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCouponInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCouponInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCouponInfoServer).GetList(ctx, req.(*UserCouponInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCouponInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCouponInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCouponInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCouponInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCouponInfoServer).Create(ctx, req.(*UserCouponInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCouponInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCouponInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCouponInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCouponInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCouponInfoServer).Update(ctx, req.(*UserCouponInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCouponInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCouponInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCouponInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCouponInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCouponInfoServer).Delete(ctx, req.(*UserCouponInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCouponInfo_ServiceDesc is the grpc.ServiceDesc for UserCouponInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCouponInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_coupon_info.user_coupon_info",
	HandlerType: (*UserCouponInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _UserCouponInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserCouponInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserCouponInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserCouponInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_coupon_info/v1/user_coupon_info.proto",
}
